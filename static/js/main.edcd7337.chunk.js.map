{"version":3,"sources":["components/top/github.png","components/top/stackoverflow.png","components/top/upwork.png","components/top/Top.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","boxStyle","borderRadius","margin","background","height","width","imageStyle","maxWidth","maxHeight","Top","props","t","visible","console","log","react_default","a","createElement","className","style","visibility","Grid","Row","Col","xs","md","href","Image","src","GithubImage","rounded","StackOverflowImage","xsHidden","UpWorkImage","App","state","loadTop","isVisible","_this","setState","_this2","this","dist_react_default","onInit","typewriter","typeString","callFunction","start","top_Top","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,8DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,0VCMpCC,EAAS,CACTC,aAAc,OACdC,OAAQ,OACRC,WAAY,YACZC,OAAQ,QACRC,MAAO,SAGPC,EAAW,CACXC,SAAU,OACVC,UAAW,QA4CAC,EAzCH,SAACC,GAET,IAAIC,EAAID,EAAME,QAEd,OADAC,QAAQC,IAAI,KAAKH,GAEbI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,MAAO,CAACC,WAAYV,EAAME,UAC5CG,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACIN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAKJ,UAAU,aACXH,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,GAChBV,EAAAC,EAAAC,cAAA,KAAGS,KAAK,6BACJX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASC,MAAOnB,GACzBe,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAOC,IAAKC,IAAaV,MAAOb,EAAWwB,SAAO,OAI5Df,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,GAChBV,EAAAC,EAAAC,cAAA,KAAGS,KAAK,4DACJX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBC,MAAOnB,GAClCe,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAOC,IAAKG,IAAoBZ,MAAOb,EAAYwB,SAAO,OAIlEf,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAKS,UAAQ,EAACP,GAAI,GAClBV,EAAAC,EAAAC,cAAA,KAAGS,KAAK,iEACJX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASC,MAAOnB,GAC3Be,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAOC,IAAKK,IAAad,MAAOb,EAAWwB,SAAO,QAK1Df,EAAAC,EAAAC,cAAA,KAAGS,KAAK,gEAAR,cAGJX,EAAAC,EAAAC,cAACK,EAAA,EAAD,SCnBDY,6MA1BXC,MAAQ,CACRvB,QAAS,YAGbwB,QAAU,SAACC,GACPxB,QAAQC,IAAI,WAAYuB,GACxBC,EAAKC,SAAS,CAAC3B,QAASyB,6EAGjB,IAAAG,EAAAC,KACP,OACE1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAClBH,EAAAC,EAAAC,cAACyB,EAAA1B,EAAD,CACE2B,OAAQ,SAACC,GACPA,EAAWC,WAAW,mCACnBC,aAAa,kBAAIN,EAAKJ,QAAQ,aAC9BW,WAEPhC,EAAAC,EAAAC,cAAC+B,EAAD,CAAKpC,QAAS6B,KAAKN,MAAMvB,mBArBfqC,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.edcd7337.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/github.c01811a0.png\";","module.exports = __webpack_public_path__ + \"static/media/stackoverflow.651d115f.png\";","module.exports = __webpack_public_path__ + \"static/media/upwork.f748dea2.png\";","import React from 'react'; \nimport {Grid, Row, Col, Image} from 'react-bootstrap';\nimport GithubImage from './github.png'\nimport StackOverflowImage from './stackoverflow.png';\nimport UpWorkImage from './upwork.png';\n\nvar boxStyle={\n    borderRadius: '10px',\n    margin: '20px',\n    background: '#1a40618c',\n    height: '100px',\n    width: '300px',\n}\n\nvar imageStyle={\n    maxWidth: '100%',\n    maxHeight: '100%',\n}\n\nconst Top = (props) => {\n    \n    let t = props.visible\n    console.log('t:',t);\n    return (\n        <div className=\"list\" style={{visibility: props.visible}}>\n            <Grid>\n                <Row className=\"show-grid\">\n                    <Col xs={6} md={4}>\n                    <a href=\"https://github.com/frumsy\">\n                        <div className=\"Github\" style={boxStyle}>\n                              <Image src={GithubImage} style={imageStyle}rounded />\n                        </div>\n                    </a>\n                    </Col>\n                    <Col xs={6} md={4}>\n                    <a href=\"https://stackoverflow.com/users/6706654/liam?tab=profile\">\n                        <div className=\"StackOverflow\" style={boxStyle}>\n                            <Image src={StackOverflowImage} style={imageStyle} rounded />\n                        </div>\n                    </a>\n                    </Col>\n                    <Col xsHidden md={4}>\n                    <a href=\"https://www.upwork.com/o/profiles/users/_~0193916a6f17380807/\">\n                        <div className=\"UpWork\" style={boxStyle}>\n                            <Image src={UpWorkImage} style={imageStyle}rounded />\n                        </div>\n                    </a>\n                    </Col>\n                </Row>\n                    <a href=\"https://github.com/frumsy/liam-pcb/raw/master/src/Resume.pdf\">\n                        resume.pdf\n                    </a>\n                <Row>\n                </Row>\n            </Grid>\n\n        </div>\n    );\n}\n\nexport default Top \n","import React, { Component } from 'react';\nimport './App.css';\nimport Typewriter from 'typewriter-effect';\nimport Top from './components/top/Top';\n\nclass App extends Component {\n\n    state = {\n    visible: 'hidden',\n}\n\nloadTop = (isVisible) =>{\n    console.log('called: ', isVisible);\n    this.setState({visible: isVisible});\n}\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        <Typewriter\n          onInit={(typewriter) => {\n            typewriter.typeString('user@liam-pcb.com$./profiles.sh')\n              .callFunction(()=>this.loadTop('visible'))\n              .start();\n        }}/>\n        <Top visible={this.state.visible}/>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}